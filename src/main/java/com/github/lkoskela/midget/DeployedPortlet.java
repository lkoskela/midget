package com.github.lkoskela.midget;

import static java.util.Collections.list;

import java.io.IOException;
import java.io.UnsupportedEncodingException;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.Portlet;
import javax.portlet.PortletContext;
import javax.portlet.PortletException;
import javax.portlet.PortletMode;
import javax.portlet.WindowState;
import javax.servlet.ServletContext;

import org.apache.pluto.container.ContainerServices;
import org.apache.pluto.container.PortletContainer;
import org.apache.pluto.container.PortletContainerException;
import org.apache.pluto.container.PortletEnvironmentService;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockHttpSession;
import org.springframework.mock.web.portlet.MockActionResponse;
import org.springframework.mock.web.portlet.MockMimeResponse;
import org.springframework.mock.web.portlet.MockPortletSession;

import com.github.lkoskela.midget.impl.MidgetPortletWindow;

public class DeployedPortlet {
	private final PortletContainer portletContainer;
	private final Portlet portletInstance;
	private final PortletContext portletContext;
	private final MidgetExecutionContext executionContext;
	private final MidgetPortletWindow portletWindow;
	private final ServletContext servletContext;
	private MockHttpServletRequest nextRequest;
	private MockPortletSession portletSession;

	public DeployedPortlet(PortletContainer container, Portlet portlet,
			PortletContext portletContext, ServletContext servletContext,
			MidgetExecutionContext executionContext, MidgetPortletWindow window) {
		this.portletContainer = container;
		this.portletInstance = portlet;
		this.portletContext = portletContext;
		this.executionContext = executionContext;
		this.portletWindow = window;
		this.servletContext = servletContext;
		resetForNextRequest();
	}

	/**
	 * Returns the actual Portlet instance.
	 */
	public Portlet getPortlet() {
		return portletInstance;
	}

	/**
	 * Returns the Portlet's window.
	 */
	public MidgetPortletWindow getPortletWindow() {
		return portletWindow;
	}

	/**
	 * Simulate a 'render' request to the deployed Portlet.
	 */
	public DeployedPortlet render() throws PortletException, IOException,
			PortletContainerException {
		doRender();
		resetForNextRequest();
		return this;
	}

	/**
	 * Simulate an 'action' request to the deployed Portlet. Note that this
	 * effectively also triggers a 'render' request.
	 */
	public DeployedPortlet action() throws PortletException, IOException,
			PortletContainerException {
		MockHttpServletRequest request = request();
		doAction(request);
		copyPhaseTransitionDataTo(request);
		return render();
	}

	/**
	 * Simulate a 'resource' request to the deployed Portlet.
	 */
	public void resource() throws PortletException, IOException,
			PortletContainerException {
		MockHttpServletResponse response = new MockHttpServletResponse();
		portletContainer.doServeResource(portletWindow, request(), response);
	}

	/**
	 * Get the last MockRenderResponse processed by the deployed Portlet.
	 */
	public MockMimeResponse lastRenderResponse() {
		String name = getPortletName();
		MockMimeResponse response = executionContext.getRenderResponse(name);
		if (response == null) {
			response = executionContext.getResourceResponse(name);
		}
		return response;
	}

	/**
	 * Get the last MockRenderResponse processed by the deployed Portlet.
	 */
	public MockActionResponse lastActionResponse() {
		return executionContext.getActionResponse(getPortletName());
	}

	/**
	 * Returns the last response content generated by the deployed Portlet.
	 */
	public String renderedContentAsString() {
		try {
			return lastRenderResponse().getContentAsString();
		} catch (UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * Returns the last response content generated by the deployed Portlet.
	 */
	public byte[] renderedContentAsBytes() {
		return lastRenderResponse().getContentAsByteArray();
	}

	/**
	 * Set the Portlet's active Portlet mode.
	 */
	public void setPortletMode(PortletMode mode) {
		portletWindow.setPortletMode(mode);
	}

	/**
	 * Set the Portlet's active window state.
	 */
	public void setWindowState(WindowState state) {
		portletWindow.setWindowState(state);
	}

	/**
	 * Stub the given resource to render the provided content when the Portlet
	 * under test tries to include it.
	 * 
	 * @param path
	 *            The path for which we are providing a stubbed response.
	 * @param content
	 *            The stubbed response content.
	 */
	public void stubResource(String path, String content) {
		executionContext.stubResource(getPortletName(), path, content);
	}

	/**
	 * Returns the path of the latest forward or <code>null</code> if no
	 * forwarding was done.
	 */
	public String lastForwardedPath() {
		return executionContext.getForwardedPath(getPortletName());
	}

	/**
	 * Returns the path of the latest redirect or <code>null</code> if no
	 * redirect was done.
	 */
	public String lastRedirectedPath() {
		return executionContext.getRedirectedPath(getPortletName());
	}

	/**
	 * @param name
	 *            Name of the parameter.
	 * @param value
	 *            Value for the parameter.
	 */
	public void addRequestParameter(String name, String value) {
		request().addParameter(name, value);
	}

	/**
	 * @param name
	 *            Name of the parameter.
	 * @param values
	 *            Values for the parameter.
	 */
	public void addRequestParameter(String name, String[] values) {
		request().addParameter(name, values);
	}

	/**
	 * @param name
	 *            Name of the attribute.
	 * @param value
	 *            Value for the attribute.
	 */
	public void setRequestAttribute(String name, Object value) {
		request().setAttribute(name, value);
	}

	/**
	 * @param name
	 *            Name of the attribute.
	 * @param value
	 *            Value for the attribute.
	 */
	public void setSessionAttribute(String name, Object value) {
		session().setAttribute(name, value);
	}

	/**
	 * @param name
	 *            Name of the attribute.
	 * @param value
	 *            Value for the attribute.
	 * @param scope
	 *            One of PortletSession.APPLICATION_SCOPE or
	 *            PortletSession.PORTLET_SCOPE.
	 */
	public void setSessionAttribute(String name, Object value, int scope) {
		session().setAttribute(name, value, scope);
	}

	private void doAction(MockHttpServletRequest request)
			throws PortletException, IOException, PortletContainerException {
		MockHttpServletResponse response = new MockHttpServletResponse();
		portletContainer.doAction(portletWindow, request, response);
	}

	private void doRender() throws PortletException, IOException,
			PortletContainerException {
		MockHttpServletResponse response = new MockHttpServletResponse();
		portletContainer.doRender(portletWindow, request(), response);
	}

	private void copyPhaseTransitionDataTo(MockHttpServletRequest request) {
		String portletName = getPortletName();
		copyRequestAttributesTo(request, portletName);
		copyRenderParametersTo(request, portletName);
	}

	private void copyRenderParametersTo(MockHttpServletRequest request,
			String portletName) {
		ActionResponse actionResponse = executionContext
				.getActionResponse(portletName);
		request.addParameters(actionResponse.getRenderParameterMap());
	}

	private void copyRequestAttributesTo(MockHttpServletRequest request,
			String portletName) {
		ActionRequest actionRequest = executionContext
				.getActionRequest(portletName);
		for (String name : list(actionRequest.getAttributeNames())) {
			request.setAttribute(name, actionRequest.getAttribute(name));
		}
	}

	private MockPortletSession createNewPortletSession() {
		ContainerServices services = portletContainer.getContainerServices();
		PortletEnvironmentService env = services.getPortletEnvironmentService();
		MockHttpSession httpSession = new MockHttpSession();
		request().setSession(httpSession);
		return (MockPortletSession) env.createPortletSession(portletContext,
				getPortletWindow(), httpSession);
	}

	private MockHttpServletRequest request() {
		if (nextRequest == null) {
			nextRequest = new MockHttpServletRequest(servletContext);
		}
		return nextRequest;
	}

	private MockPortletSession session() {
		if (portletSession == null) {
			portletSession = createNewPortletSession();
		}
		return portletSession;
	}

	private void resetForNextRequest() {
		nextRequest = null;
	}

	private String getPortletName() {
		return portletWindow.getPortletDefinition().getPortletName();
	}
}